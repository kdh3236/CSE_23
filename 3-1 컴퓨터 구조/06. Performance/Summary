Program = Sequence of instructions

Program의 성능을 어떻게 측정할까?
  1. Latency
    - Low latency = High performance
  2. Throughput
    - High throughput = High performance

Iron law of performance
  - wall clock time = (Clock period) * (CPI) * (# intructions)
  - Low wall clock time means high performance

여러 metrics가 있는데 비교적 중요한 것은 다음 두 가지이다.
  1. Geometric mean
    - Y에 대한 GM이라고 하면 Y에 대한 X의 비율의 평균을 구하는 것이다.
  2. Harmonic mean
    - Rate의 평균을 구할 때, 이 방법을 사용한다.
    - 속도나 Throughput 같은 것을 단순히 평균내면 (AM, WAM) 왜곡 된다.
      - 속도가 변할 때, 걸린 시간으로 속도의 평균을 내면 왜곡되는 것과 동일
    따라서 Harmonic mean으로 rate의 평균을 계산할 수 있다.

Amdahl's law
  - 우리가 어떤 성능을 개선했을 때, 특정 부분의 성능만 개선되고, 전체적인 성능 개선이 안 되었을 수도 있다.
  - 이러한 경우 우리가 개선한 특정 부분의 성능이 전체적인 측면에서 성능을 얼마나 개선했는지 확인하는 방법이다.

  - 전체가 1 time만큼 걸린다고 생각하자.
  - 우리는 1 time 중 f time(f < 1)에 대해서만 s만큼 speedup을 하였다.
  - 그렇다면 부분적인 성능은 f -> (f/s) 만큼 개선되었을 것이다.
  - 전체적인 성능(s_overall)은 [ 1 / { (1-f) + (f/s) } ] 만큼 개선 되었을 것이다.

  - f 자체가 전체 program에서 차지하는 부분이 미비하다면 전혀 성능 개선이 안 되었을 수도 있다. 
